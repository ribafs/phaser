 Phaser: Animations

Published in 2021



    This post is part of a Phaser series. Click here to see the first post of the series.

To play an animation on a sprite after you create it:

function preload() {
  this.load.sprite('dog', 'dog.png')
}

function create() {
  this.add.sprite(400, 200, 'dog')
}

You first have to load a Sprite sheet.

A sprite sheet is a set of different sprites included in a single image.

You load a sprite sheet telling Phaser what are the width and height of each image contained in the sheet. in this case 20x20 pixels:

this.load.spritesheet('dog', 'dog.png', {
  frameWidth: 20,
  frameHeight: 20
})

Once you do so, you can generate an animation using this.anims.create():

this.anims.create({
  key: 'animate_dog',
  frames: this.anims.generateFrameNames('dog'),
  frameRate: 20,
  repeat: -1
})

Here we say to use the frames from the sprite sheet, animate at 20 frames per second, and repeat forever.

To start the animation we must call

this.ship1.play('ship1_anim')

This animation will repeat forever.

You can also perform an animation just once, and make the sprite sheet disappear after the animation is done, by adding those options:

repeat: 0,
hideOnComplete: true

and instead of running through all the frames in a sprite sheet, you can iterate through a fraction of them:

frames: this.anims.generateFrameNames('dog', {
  start: 0,
  end: 2
})

This is useful especially when you have a big sprite sheet that contains multiple objects.

-----------
Animation
Introduction¶

Animation and animations manager.

    Author: Richard Davey

Usage¶
Animation manager¶
Add animation¶

scene.anims.create({
    key: '',
    frames: [],
    skipMissedFrames: true,
    defaultTextureKey: null,
    startFrame: 0,

    // time
    delay: 0,
    frameRate: null,
    duration: null,
    timeScale: 1,

    // repeat
    repeat: 0,              // set to (-1) to repeat forever
    repeatDelay: 0,
    yoyo: false,

    // visible
    showOnStart: false,
    hideOnComplete: false
});

    frames : An array of {key, frame}
        Properties

{
    key: '',
    frame: '', // string, or number
    duration: 0,
    visible: true
}

Every frame in the atlas

scene.anims.generateFrameNames(key);

Frame sequence indexing from start to end

var config = ;
scene.anims.generateFrameNames(key,
{
    prefix: '',
    start: 0,
    end: 0,
    suffix: '',
    zeroPad: 0,
    // outputArray: [], // Append frames into this array
});

    prefix + Pad(i, zeroPad, '0', 1) + suffix, i: start ~ end

Custom frame sequence

        var config = ;
        scene.anims.generateFrameNames(key,
        {
            prefix: '',
            suffix: '',
            zeroPad: 0,
            frames: [ ... ]
            // outputArray: [], // Append frames into this array
        });

            prefix + Pad(frames[i], zeroPad, '0', 1) + suffix

Add from Aseprite¶

Aseprite

scene.anims.createFromAseprite(key);
// scene.anims.createFromAseprite(key, tags);

    key : The key of the loaded Aseprite atlas.
    tags :
        undefined : Load all tags.
        Array of string tag : Load these tags.

Remove animation¶

scene.anims.remove(key);

Delay between two animations¶

    Add

scene.anims.addMix(animA, animB, delay);

    animA, animB : String key of an animation, or an instance of animation.

Remove

scene.anims.removeMix(animA, animB);
// scene.anims.removeMix(animA);

Get

    var delay = scene.anims.getMix(animA, animB);

Play animation¶

    Play

scene.anims.play(key, children);

Stagger play (delay play)

    scene.anims.staggerPlay(key, children, stagger, staggerFirst);

        children : An array of Game Objects to play the animation on
        stagger : The amount of time, in milliseconds, to offset each play time by
        staggerFirst : Set true to apply delay on 1st child

Pause all animations¶

scene.anims.pauseAll();

Resume all animations¶

scene.anims.resumeAll();

Has animation¶

var hasAnim = scene.anims.exists(key);

Export/load¶

    Export JSON

var json = scene.anims.toJSON();

Load from JSON

scene.anims.fromJSON(json);
// scene.anims.fromJSON(json, clearCurrentAnimations);

    Load JSON in preload stage javascript scene.load.json(key, url);
    Load animation in preload stage

        scene.load.animation(key, url);

Events¶

    On add animation

scene.anims.on('add', function(key, anim) {});

On remove animation

scene.anims.on('remove', function(key, anim) {});

On pause all animations

scene.anims.on('pauseall', function() {});

On resume all animations

    scene.anims.on('resumeall', function() {});

Animation object¶

var anim = scene.anims.get(key);

Add frame¶

    Append frames

anim.addFrame(frame);

    frame : scene.anims.generateFrameNames(key, config)

Insert frames at index

    anim.addFrameAt(index, frame);

        frame : scene.anims.generateFrameNames(key, config)

Remove frame¶

    Remove frame at

anim.removeFrameAt(index);

Remove frame

    anim.removeFrame(frame);

Get frame¶

    Has frame index

var HasFrameAt = anim.checkFrame(index);

Get frame at index

var frame = anim.getFrameAt(index);

Get last frame

    var frame = anim.getLastFrame();

Export¶

    Export JSON

var json = anim.toJSON();

or

var jsonString = JSON.stringify(anim);
